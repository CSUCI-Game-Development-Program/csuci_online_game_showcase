---
layout: base.liquid  
title: Games
data: games
alias: game
---

<section class="landing">
  <h2 class="text-center">- Collections -</h2>
  <div class="container row list collections">
    <div class="col-md-4">
      <input
        type="text"
        class="form-control"
        id="searchInput"
        onkeyup="searchTable()"
        placeholder="Search...">
      <br>
    </div>

    <!--Bootstrap 5.0 Cards

                <td>Developer: {{ game.developer }}</td>
                <td>Date: {{ game.datesubmitted }}</td>
                <td>Environment: {{ game.environment }}</td>

        -->
        <table id="gameTableBody" class="table">
        <div class="row">
          {% for game in games %}
           <div class="col-md-4">
              <div class="card bg-dark border-dark">
                <div class="card-body">
              <a href="/games/{{ game.title | slugify }}-{{ game.developer | slugify }}.html" class="game-link">
              <h5 class="card-title">{{ game.title }}</h5>
              </a>
                <p class="card-text">by {{ game.developer }} </p>
                <p class="card-text"> {{ game.datesubmitted }} </p>
                <p class="card-text"> {{ game.environment }} </p>
              <a href="/public/browser_games/{{ game.filename }}.html" download class="gradient-btn">Download</a>
                </div>
             </div>
          </div>
          {% endfor %}
          </div>
          </table>
</section>

<!-- Bootstrap JS and jQuery -->

<script>
  function searchTable() {
    var input,
      filter,
      table,
      tr,
      td,
      i,
      txtValue,
      rowCount;

    input = document.getElementById("searchInput");
    filter = input.value.toUpperCase();
    table = document.getElementById("gameTableBody");
    tr = table.getElementsByTagName("tr");
    rowCount = 0;

// Loop through all table rows, and hide those that don't match the search query
    for (i = 0; i < tr.length; i++) {
      td = tr[i].getElementsByTagName("td");
      for (var j = 0; j < td.length; j++) {
        if (td[j]) {
          txtValue = td[j].textContent || td[j].innerText;
          if (txtValue.toUpperCase().indexOf(filter) > -1) {
            tr[i].style.display = "";
            rowCount++;
            break;
          } else {
            tr[i].style.display = "none";
          }
        }
      }

// Display only 20 rows at a time
      if (rowCount >= 15) {
        for (var k = i + 1; k < tr.length; k++) {
          tr[k].style.display = "none";
        }
        break;
      }
    }
  }

  document.addEventListener('DOMContentLoaded', function() {

// Show only the first 20 rows of the table
    const gameTableBodyRows = document.querySelectorAll('#gameTableBody tr');
    for (let i = 15; i < gameTableBodyRows.length; i++) {
      gameTableBodyRows[i].style.display = 'none';
    }

// Add onscroll event listener to window object
    window.addEventListener('scroll', function() {
      const showMoreButton = document.getElementById('showMoreButton');
      if (showMoreButton) {
        const hiddenRows = document.querySelectorAll('#gameTableBody tr:not([style*="display: table-row"])');
        if (hiddenRows.length > 0 && window.innerHeight + window.scrollY >= document.body.offsetHeight) {
          const numToShow = hiddenRows.length > 20
            ? 20
            : hiddenRows.length;
          for (let i = 0; i < numToShow; i++) {
            hiddenRows[i].style.display = 'table-row';
          }
          const buttonText = hiddenRows.length > numToShow
            ? 'Scroll down'
            : 'End';
          showMoreButton.textContent = buttonText;
        }
      }
    });

// Add "Show More" button
    const showMoreButton = document.createElement('button');
    showMoreButton.id = 'showMoreButton';
    showMoreButton.classList.add('btn', 'btn-inv', 'btn-primary');
    showMoreButton.textContent = 'Scroll';
    document.querySelector('.list').appendChild(showMoreButton);
  });
</script>